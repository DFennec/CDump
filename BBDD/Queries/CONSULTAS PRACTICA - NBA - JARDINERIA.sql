/*QUERYS DE EJEMPLO DE TODOS LOS TIPOS SOBRE LA BASE DE DATOS NBA*/
/*---------------------------------------------------------------*/
Use nba;
/*EQUIPOS Y CIUDAD DE LOS JUGADORES ESPAÑOLES DE LA NBA*/
SELECT * FROM EQUIPOS;
SELECT * FROM JUGADORES;
SELECT jugadores.nombre, nombre_equipo as EQUIPO,procedencia FROM JUGADORES INNER JOIN EQUIPOS ON JUGADORES.NOMBRE_EQUIPO=EQUIPOS.NOMBRE WHERE PROCEDENCIA='SPAIN';

/*PUNTOS POR PARTIDO DE ‘PAU GASOL’ EN TODAS LAS TEMPORADAS*/
SELECT * FROM JUGADORES;
SELECT * FROM estadisticas;
SELECT TEMPORADA, jugadores.nombre, Puntos_por_partido as PuntosPorPartido FROM JUGADORES INNER JOIN ESTADISTICAS ON JUGADORES.CODIGO=ESTADISTICAS.JUGADOR WHERE nombre='Pau Gasol' order by TEMPORADA;

/*PUNTOS POR PARTIDO DE LOS JUGADORES DE LOS CAVALIERS*/
SELECT * FROM JUGADORES;
SELECT * FROM estadisticas;
SELECT jugadores.nombre,jugadores.nombre_equipo, Puntos_por_partido as PuntosPorPartido FROM JUGADORES INNER JOIN ESTADISTICAS ON JUGADORES.CODIGO=ESTADISTICAS.JUGADOR WHERE nombre_Equipo='cavaliers' order by TEMPORADA;

/*EN QUÉ TEMPORADA LEBRON JAMES CONSIGUIÓ MÁS PUNTOS POR PARTIDO*/
SELECT * FROM JUGADORES;
SELECT * FROM estadisticas;
SELECT jugadores.Nombre,  Puntos_por_partido as MaxPuntos, temporada FROM JUGADORES inner JOIN ESTADISTICAS ON JUGADORES.CODIGO=ESTADISTICAS.JUGADOR WHERE nombre='Lebron James' order by puntos_por_partido desc LIMIT 1;

/*ASISTENCIAS POR PARTIDO DE JOSE CALDERÓN EN LA TEMPORADA 07/08*/
SELECT * FROM JUGADORES;
SELECT * FROM estadisticas;
SELECT TEMPORADA, jugadores.nombre, Asistencias_por_partido as AsistenciasPorPartido FROM JUGADORES INNER JOIN ESTADISTICAS ON JUGADORES.CODIGO=ESTADISTICAS.JUGADOR WHERE nombre='Jose Calderón'and temporada="07/08";

/*PUNTOS POR PARTIDO DE LEBRON JAMES DE LA TEMPORADA 03/04 A LA 05/06*/

SELECT * FROM JUGADORES;
SELECT * FROM estadisticas;
SELECT TEMPORADA, jugadores.nombre, Puntos_por_partido as PuntosPorPartido FROM JUGADORES INNER JOIN ESTADISTICAS ON JUGADORES.CODIGO=ESTADISTICAS.JUGADOR WHERE nombre='Lebron James' and temporada between "03/04" and "05/06";

/*CUÁNTOS JUGADORES TIENE CADA EQUIPO DE LA CONFERENCIA ESTE(EAST)*/
SELECT * FROM EQUIPOS;
SELECT * FROM JUGADORES;
SELECT Conferencia, count(*) FROM JUGADORES INNER JOIN EQUIPOS ON JUGADORES.NOMBRE_EQUIPO=EQUIPOS.NOMBRE WHERE Conferencia='east';

/*TAPONES POR PARTIDO DE LOS JUGADORES DE LOS BLAZERS*/
SELECT * FROM JUGADORES;
SELECT * FROM estadisticas;
SELECT jugadores.nombre as Nombre, tapones_por_partido as TaponesPorPartido FROM JUGADORES INNER JOIN ESTADISTICAS ON JUGADORES.CODIGO=ESTADISTICAS.JUGADOR WHERE jugadores.nombre_equipo='Trail Blazers';

/*MEDIA DE REBOTES DE LOS JUGADORES DE LA CONFERENCIA ESTE*/
SELECT * FROM EQUIPOS;
SELECT * FROM JUGADORES;
SELECT * FROM ESTADISTICAS;
SELECT Conferencia,round(AVG(Rebotes_por_partido),2)AS PromedioDeRebotesPorPartido FROM EQUIPOS INNER JOIN JUGADORES ON EQUIPOS.NOMBRE=JUGADORES.NOMBRE_EQUIPO INNER JOIN ESTADISTICAS ON JUGADORES.CODIGO = ESTADISTICAS.JUGADOR WHERE Conferencia='east';

/*REBOTES POR PARTIDO DE CADA JUGADOR DE LOS ÁNGELES. MEDIA DEL EQUIPO*/
SELECT * FROM EQUIPOS;
SELECT * FROM JUGADORES;
SELECT * FROM ESTADISTICAS;
SELECT jugadores.nombre_equipo AS Equipo, round(AVG(Rebotes_por_partido),2)AS PromedioDeRebotesPorPartido  FROM EQUIPOS INNER JOIN JUGADORES ON EQUIPOS.NOMBRE=JUGADORES.NOMBRE_EQUIPO INNER JOIN ESTADISTICAS ON JUGADORES.CODIGO = ESTADISTICAS.JUGADOR WHERE jugadores.nombre_equipo='Lakers';

/*CUÁNTOS JUGADORES TIENE CADA EQUIPO DE LA DIVISION NORTHWEST*/

SELECT * FROM EQUIPOS;
SELECT * FROM JUGADORES;
SELECT Division, count(*) FROM JUGADORES INNER JOIN EQUIPOS ON JUGADORES.NOMBRE_EQUIPO=EQUIPOS.NOMBRE WHERE Division='NORTHWEST';

/*JUGADORES QUE NO METIERON NINGÚN PUNTO ÉL ALGUNA TEMPORADA*/

SELECT * FROM JUGADORES;
SELECT * FROM estadisticas;
SELECT Temporada, jugadores.nombre as Nombre, puntos_por_partido as PuntosPorPartido FROM JUGADORES INNER JOIN ESTADISTICAS ON JUGADORES.CODIGO=ESTADISTICAS.JUGADOR WHERE estadisticas.puntos_por_partido=0;

/*NÚMERO DE JUGADORES EN CADA DIVISIÓN*/
SELECT * FROM EQUIPOS;
SELECT * FROM JUGADORES;
SELECT Division, count(*) FROM JUGADORES INNER JOIN EQUIPOS ON JUGADORES.NOMBRE_EQUIPO=EQUIPOS.NOMBRE group by Division;

/*PESO MEDIO EN KILOS DE LOS JUGADORES DE LOS RAPTORS*/
SELECT Nombre_equipo, round(avg(Peso),2) AS PesoMedioEnLibras from Jugadores where nombre_equipo="RAPTORS";

/*LISTADO DE LOS JUGADORES EN FORMATO NOMBRE(EQUIPO)*/
SELECT * FROM JUGADORES;
SELECT concat(Nombre," (",Nombre_equipo,")")AS JugadorYEquipo FROM JUGADORES;

/*PUNTUACIÓN MÁS BAJA DE UN PARTIDO DE LA NBA*/
SELECT * FROM partidos;
SELECT  concat(equipo_local," vs. ",equipo_visitante)as Partido,MIN(puntos_local+puntos_visitante) as Puntaje, Temporada as Puntuación FROM partidos;
/*TEMPORADA CON MÁS PUNTOS POR PARTIDO DE KOBE BRYANT*/
SELECT * FROM JUGADORES;
SELECT * FROM estadisticas;
SELECT jugadores.nombre as Nombre, puntos_por_partido as PuntosPorPartido, temporada FROM JUGADORES INNER JOIN ESTADISTICAS ON JUGADORES.CODIGO=ESTADISTICAS.JUGADOR WHERE jugadores.nombre="Kobe Bryant" order by puntos_por_partido desc LIMIT 1;

/*NÚMERO DE BASES ‘G’ QUE TIENE CADA EQUIPO DE LA CONFERENCIA ESTE*/
SELECT * FROM EQUIPOS;
SELECT * FROM JUGADORES;
SELECT Posicion, count(*)as Bases,Conferencia FROM JUGADORES INNER JOIN EQUIPOS ON JUGADORES.NOMBRE_EQUIPO=EQUIPOS.NOMBRE where Posicion="G" and conferencia="EAST";

/*NÚMERO DE EQUIPOS POR CONFERENCIA*/
SELECT * FROM EQUIPOS;
SELECT Conferencia, count(*) as Equipos FROM EQUIPOS group by conferencia;

/*NOMBRE DE LAS DIVISIONES DE LA CONFERENCIA ESTE*/
SELECT * FROM EQUIPOS;
SELECT conferencia, division FROM EQUIPOS where conferencia="east" group by division;

/*MÁXIMO REBOTEADOR DE LOS SUNS*/
SELECT * FROM EQUIPOS;
SELECT * FROM JUGADORES;
SELECT * FROM ESTADISTICAS;
SELECT jugadores.nombre_equipo AS Equipo, jugadores.Nombre, Rebotes_por_partido AS RebotesPorPartido  FROM EQUIPOS INNER JOIN JUGADORES ON EQUIPOS.NOMBRE=JUGADORES.NOMBRE_EQUIPO INNER JOIN ESTADISTICAS ON JUGADORES.CODIGO = ESTADISTICAS.JUGADOR WHERE jugadores.nombre_equipo='Suns' order by Rebotes_por_partido desc LIMIT 1;


/*MÁXIMO ANOTADOR EN UNA TEMPORADA*/
SELECT * FROM JUGADORES;
SELECT * FROM estadisticas;
SELECT Temporada, jugadores.Nombre, puntos_por_partido as MaxPPPTemporada  FROM JUGADORES INNER JOIN ESTADISTICAS ON JUGADORES.CODIGO=ESTADISTICAS.JUGADOR group by temporada order by puntos_por_partido desc;

/*CUANTAS LETRAS TIENE EL NOMBRE DE CADA JUGADOR DE LOS GRIZZLIES(FUNCIÓN LENGTH)*/
SELECT * FROM EQUIPOS;
SELECT * FROM JUGADORES;
SELECT equipos.Nombre as Equipo,jugadores.Nombre, length(jugadores.nombre) as LargoNombre FROM JUGADORES INNER JOIN EQUIPOS ON JUGADORES.NOMBRE_EQUIPO=EQUIPOS.NOMBRE where equipos.nombre="Grizzlies" order by LargoNombre desc;

/*-----------------------------------------------------------------------*/
/*QUERYS DE EJEMPLO DE TODOS LOS TIPOS SOBRE LA BASE DE DATOS JARDINERIA */
/*-----------------------------------------------------------------------*/
Use jardineria;
/* LISTA DE LOS PRODUCTOS QUE NUNCA HAN APARECIDO EN UN PEDIDO */
SELECT * FROM DETALLEPEDIDOS; 
SELECT * FROM PRODUCTOS;
SELECT Nombre as Producto, productos.Codigoproducto FROM DETALLEPEDIDOS RIGHT JOIN PRODUCTOS ON DETALLEPEDIDOS.CODIGOPRODUCTO=PRODUCTOS.CODIGOPRODUCTO where DETALLEPEDIDOS.codigoproducto IS NULL;

/* DEVUELVE LAS OFICINAS DONDE NO TRABAJAN NINGUNO DE LOS EMPLEADOS QUE HAYAN SIDO LOS REPRESENTANTES DE VENTAS DE ALGÚN CLIENTE QUE HAYA REALIZADO LA COMPRA DE ALGÚN PRODUCTO DE LA GAMA FRUTALES.*/
SELECT * FROM OFICINAS;
SELECT * FROM EMPLEADOS;
SELECT * FROM CLIENTES;
SELECT * FROM PEDIDOS;
SELECT * FROM DETALLEPEDIDOS;
SELECT * FROM PRODUCTOS;
SELECT * FROM GAMASPRODUCTOS;
SELECT Oficinas.CodigoOficina, Oficinas.Ciudad, Oficinas.Pais FROM OFICINAS INNER JOIN empleados ON OFICINAS.CODIGOOFICINA=empleados.CODIGOOFICINA INNER JOIN CLIENTES ON empleados.CODIGOEMPLEADO=CLIENTES.CODIGOEMPLEADOREPVENTAS INNER JOIN PEDIDOS ON CLIENTES.CODIGOCLIENTE=PEDIDOS.codigocliente INNER JOIN DETALLEPEDIDOS ON PEDIDOS.CODIGOPEDIDO=DETALLEPEDIDOS.CODIGOPEDIDO INNER JOIN PRODUCTOS ON DETALLEPEDIDOS.CODIGOPRODUCTO=PRODUCTOS.CODIGOPRODUCTO INNER JOIN gamasproductos ON PRODUCTOS.GAMA=GAMASPRODUCTOS.GAMA WHERE NOT PRODUCTOS.GAMA="Frutales" IN (SELECT DETALLEPEDIDOS.CODIGOPRODUCTO FROM DETALLEPEDIDOS) group by oficinas.codigooficina;

/* DEVUELVE UN LISTADO CON LOS CLIENTES QUE HAN REALIZADO ALGÚN PEDIDO PERO NO HAN REALIZADO NINGÚN PAGO */
SELECT * FROM PEDIDOS;
SELECT * FROM pagos;
SELECT * FROM clientes;
SELECT NombreCliente FROM pedidos right JOIN pagos ON pedidos.CODIGOCLIENTE=pagos.CODIGOCLIENTE left JOIN clientes ON pagos.CODIGOCLIENTE=clientes.CODIGOCLIENTE  WHERE PAGOS.codigocliente is null;
/* ¿CUÁNTOS EMPLEADOS HAY EN LA COMPAÑÍA? */
SELECT * FROM empleados;
SELECT count(*)as Empleados FROM empleados;
/* ¿CUÁNTOS CLIENTES TIENE CADA PAÍS? */
SELECT * FROM clientes;
SELECT Pais, count(*) as Clientes FROM clientes group by Pais;
/* ¿CUÁL FUE EL PAGO MEDIO EN 2009? */
SELECT * FROM pagos;
SELECT YEAR(fechapago)AS AÑO,ROUND(AVG(CANTIDAD),2) FROM pagos WHERE YEAR(FECHAPAGO)=2009;
/* ¿CUÁNTOS PEDIDOS HAY EN CADA ESTADO? ORDENA EL RESULTADO DE FORMA DESCENDENTE POR EL NÚMERO DE PEDIDOS */
SELECT * FROM PEDIDOS;
SELECT Estado,COUNT(*) as cantidad FROM PEDIDOS GROUP BY ESTADO order by cantidad desc;
update estado set estado="Pendiente" where estado="Pediente"; /* en caso de querer cambiar pediente a pendiente*/

/* CALCULA EL PRECIO DE VENTA DEL PRODUCTO MÁS CARO Y MÁS BARATO EN UNA MISMA CONSULTA */
SELECT * FROM productos;
SELECT (select nombre from productos where precioventa=462.00)as ProductoMenorPrecio, max(PrecioVenta), (select nombre from productos where precioventa=1.00 limit 1) as ProductoMenorPrecio, min(precioventa) FROM productos order by precioventa desc;

/* NÚMERO DE CLIENTES QUE TIENE CADA OFICINA */
SELECT * FROM oficinas;
SELECT * FROM empleados;
SELECT * FROM clientes;
select oficinas.Pais, oficinas.Ciudad, count(*) as Clientes from clientes inner join empleados on clientes.CodigoEmpleadoRepVentas=empleados.CodigoEmpleado inner join oficinas on Empleados.CodigoOficina=Oficinas.COdigoOficina group by Ciudad order by pais;

/* CUANTOS CLIENTES TIENE LA CIUDAD DE MADRID */
SELECT * FROM oficinas;
SELECT * FROM empleados;
SELECT * FROM clientes;
select oficinas.Pais, oficinas.Ciudad, count(*) as Clientes from clientes inner join empleados on clientes.CodigoEmpleadoRepVentas=empleados.CodigoEmpleado inner join oficinas on Empleados.CodigoOficina=Oficinas.COdigoOficina where oficinas.ciudad="Madrid";

/* DEVUELVE EL NOMBRE DE LOS REPRESENTANTES DE VENTAS Y EL NÚMERO DE CLIENTES AL QUE ATIENDE CADA UNO */
SELECT * FROM empleados;
SELECT * FROM clientes;
select concat(empleados.nombre," ",empleados.Apellido1," ",empleados.Apellido2)as NombreCompleto, count(*) as ClientesAtendidos from clientes inner join empleados on clientes.CodigoEmpleadoRepVentas=empleados.CodigoEmpleado group by empleados.nombre;
/* CALCULA EL NÚMERO DE CLIENTES QUE NO TIENE ASIGNADO REPRESENTANTE DE VENTAS */
SELECT * FROM empleados;
SELECT * FROM clientes;
select count(*) as ClientesDesatendidos from clientes inner join empleados on clientes.CodigoEmpleadoRepVentas=empleados.CodigoEmpleado where CodigoCliente in (select CodigoEmpleadoRepVentas from clientes) is null;

/* CALCULA LA FECHA DEL PRIMER Y ÚLTIMO PAGO REALIZADO POR CADA UNO DE LOS CLIENTES. EL LISTADO DEBERÁ MOSTRAR EL NOMBRE Y LOS APELLIDOS DE CADA CLIENTE */
SELECT * FROM CLIENTES;
SELECT * FROM PAGOS;
SELECT CLIENTES.NOMBRECLIENTE, MIN(PAGOS.FECHAPAGO) AS Primerpago,MAX(PAGOS.FECHAPAGO) AS Ultimopago FROM PAGOS INNER JOIN CLIENTES ON PAGOS.CODIGOCLIENTE = CLIENTES.CODIGOCLIENTE group by clientes.codigocliente;

/* CALCULA EL NÚMERO DE PRODUCTOS DIFERENTES QUE HAY EN CADA UNO DE LOS PEDIDOS */
SELECT * FROM PRODUCTOS;
SELECT * FROM DETALLEPEDIDOS;
SELECT CodigoPedido, COUNT(*) AS ProductosDiferentes FROM DETALLEPEDIDOS INNER JOIN PRODUCTOS ON detallepedidos.CODIGOPRODUCTO= PRODUCTOS.CODIGOPRODUCTO GROUP BY CODIGOPEDIDO;

/* CALCULA LA SUMA DE LA CANTIDAD TOTAL DE TODOS LOS PRODUCTOS QUE APARECEN EN CADA UNO DE LOS PEDIDOS */
SELECT * FROM PRODUCTOS;
SELECT * FROM DETALLEPEDIDOS;
SELECT SUM((SELECT COUNT(cantidad) FROM DETALLEPEDIDOS))AS TotalProductos FROM DETALLEPEDIDOS INNER JOIN PRODUCTOS ON detallepedidos.CODIGOPRODUCTO= PRODUCTOS.CODIGOPRODUCTO;

/* DEVUELVE UN LISTADO DE LOS 20 PRODUCTOS MÁS VENDIDOS Y EL NÚMERO TOTAL DE UNIDADES QUE SE HAN VENDIDO DE CADA UNO. EL LISTADO DEBERÁ ESTAR ORDENADO POR EL NÚMERO TOTAL DE UNIDADES VENDIDAS */
SELECT * FROM PRODUCTOS;
SELECT * FROM DETALLEPEDIDOS;
SELECT productos.Nombre,sum(cantidad) as udsvendidas FROM DETALLEPEDIDOS INNER JOIN PRODUCTOS ON detallepedidos.CODIGOPRODUCTO= PRODUCTOS.CODIGOPRODUCTO group by detallepedidos.codigoproducto order by udsvendidas desc limit 20;

/* LA FACTURACIÓN QUE HA TENIDO LA EMPRESA EN TODA LA HISTORIA, INDICANDO LA BASE IMPONIBLE, EL IVA Y EL TOTAL FACTURADO.
LA BASE IMPONIBLE SE CALCULA SUMANDO EL COSTE DEL PRODUCTO POR EL NÚMERO DE UNIDADES VENDIDAS DE LA TABLA DETALLE_PEDIDO.
EL IVA ES EL 21 % DE LA BASE IMPONIBLE, Y EL TOTAL LA SUMA DE LOS DOS CAMPOS ANTERIORES */
SELECT * FROM DETALLEPEDIDOS;
SELECT * FROM PRODUCTOS;
SELECT SUM(DETALLEPEDIDOS.CANTIDAD*(PRODUCTOS.PRECIOVENTA-PRODUCTOS.PRECIOPROVEEDOR))AS BASEIMPONIBLE, (SUM(DETALLEPEDIDOS.CANTIDAD*(PRODUCTOS.PRECIOVENTA-PRODUCTOS.PRECIOPROVEEDOR)))*0.21 AS IVA, (SUM(DETALLEPEDIDOS.CANTIDAD*(PRODUCTOS.PRECIOVENTA-PRODUCTOS.PRECIOPROVEEDOR)))*1.21AS TOTAL FROM PRODUCTOS INNER JOIN DETALLEPEDIDOS ON  PRODUCTOS.CODIGOPRODUCTO = DETALLEPEDIDOS.CODIGOPRODUCTO;

/* LOS CLIENTES CUYO LÍMITE DE CRÉDITO SEA MAYOR QUE LOS PAGOS QUE HAYA REALIZADO. (SIN UTILIZAR INNER JOIN).*/
/*?*/

/* DEVUELVE EL PRODUCTO QUE MÁS UNIDADES TIENE EN STOCK */
SELECT * FROM PRODUCTOS;
SELECT Nombre,CantidadEnStock FROM PRODUCTOS ORDER BY CantidadEnStock DESC LIMIT 1;

/* DEVUELVE EL NOMBRE, LOS APELLIDOS Y EL EMAIL DE LOS EMPLEADOS QUE ESTÁN A CARGO DE ALBERTO SORIA */
select * from empleados;
select CodigoEmpleado,concat(Nombre," ",Apellido1," ",Apellido2)as Empleado, email, CodigoJefe from empleados where codigojefe="3";

/* DEVUELVE EL NOMBRE, APELLIDO1 Y CARGO DE LOS EMPLEADOS QUE NO REPRESENTEN A NINGÚN CLIENTE */
select * from empleados;
select * from clientes;
select concat(Nombre," ",Apellido1) as Nombre, Puesto from empleados inner join clientes on empleados.codigoempleado=clientes.codigoempleadorepventas where CodigoempleadoRepVentas not in (select CodigoCliente from clientes);


/* DEVUELVE UN LISTADO QUE MUESTRE SOLAMENTE LOS CLIENTES QUE NO HAN REALIZADO NINGÚN PAGO */
SELECT * FROM CLIENTES;
SELECT * FROM PAGOS;
SELECT nombrecliente FROM clientes INNER JOIN pagos ON clientes.CODIGOCLIENTE = pagos.CODIGOCLIENTE where pagos.CodigoCliente  is null group by clientes.codigocliente;

/* DEVUELVE UN LISTADO QUE MUESTRE SOLAMENTE LOS CLIENTES QUE SÍ HAN REALIZADO NINGÚN PAGO */
SELECT * FROM CLIENTES;
SELECT * FROM PAGOS;
SELECT clientes.CodigoCliente, nombrecliente FROM clientes INNER JOIN pagos ON clientes.CODIGOCLIENTE = pagos.CODIGOCLIENTE where pagos.CodigoCliente  is not null group by clientes.codigocliente;

/* DEVUELVE UN LISTADO DE LOS PRODUCTOS QUE NUNCA HAN APARECIDO EN UN PEDIDO */
SELECT * FROM DETALLEPEDIDOS;
SELECT * FROM PRODUCTOS;
SELECT productos.Nombre, productos.Codigoproducto FROM PRODUCTOS INNER JOIN DETALLEPEDIDOS ON  PRODUCTOS.CODIGOPRODUCTO = DETALLEPEDIDOS.CODIGOPRODUCTO where detallepedidos.CodigoProducto is null order by productos.codigoproducto;
/*Sí, no es casualidad, todas las de este estilo están mal y vacías de manera intencional, no tengo ni una ligera idea de cómo hacerlas.
No es que no entienda la lógica, es que no entiendo el programa, de manera similar ocurre con las que están desordenadas, los errores no es que no los note,
es que después de 10 horas resolviendo esto ya se me agotan las inferencias de qué puede significar esta sintaxis de python de Aliexpress.*/
